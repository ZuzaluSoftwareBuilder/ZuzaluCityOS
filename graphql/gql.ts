/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation CreateZucityAnnouncementMutation($input: CreateZucityAnnouncementInput!) {\n    createZucityAnnouncement(input: $input) {\n      document {\n        id\n        title\n        description\n        createdAt\n        updatedAt\n        sourceId\n        spaceId\n        eventId\n        space {\n          id\n          name\n        }\n        event {\n          id\n          title\n        }\n      }\n    }\n  }\n": typeof types.CreateZucityAnnouncementMutationDocument,
    "\n  mutation UpdateZucityAnnouncementMutation($input: UpdateZucityAnnouncementInput!) {\n    updateZucityAnnouncement(input: $input) {\n      document {\n        id\n        title\n        description\n        updatedAt\n      }\n    }\n  }\n": typeof types.UpdateZucityAnnouncementMutationDocument,
    "\n  mutation EnableIndexingZucityAnnouncement($input: EnableIndexingZucityAnnouncementInput!) {\n    enableIndexingZucityAnnouncement(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": typeof types.EnableIndexingZucityAnnouncementDocument,
    "\n  query GetSpaceAnnouncements($id: ID!, $first: Int = 100) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        announcements(first: $first) {\n          edges {\n            node {\n              id\n              title\n              tags {\n                tag\n              }\n              description\n              createdAt\n              updatedAt\n              sourceId\n              author {\n                id\n                zucityProfile {\n                  avatar\n                  username\n                }\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpaceAnnouncementsDocument,
    "\n  query GetEventAnnouncements($id: ID!, $first: Int = 100) {\n    node(id: $id) {\n      ... on ZucityEvent {\n        announcements(first: $first) {\n          edges {\n            node {\n              id\n              title\n              tags {\n                tag\n              }\n              description\n              createdAt\n              updatedAt\n              sourceId\n              author {\n                id\n                zucityProfile {\n                  avatar\n                  username\n                }\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetEventAnnouncementsDocument,
    "\n  query GetDappList($first: Int = 100, $filters: ZucityDappInfoFiltersInput) {\n    zucityDappInfoIndex(first: $first, filters: $filters) {\n      edges {\n        node {\n          id\n          appName\n          tagline\n          developerName\n          description\n          bannerUrl\n          categories\n          devStatus\n          openSource\n          repositoryUrl\n          appUrl\n          websiteUrl\n          docsUrl\n          isInstallable\n          appLogoUrl\n          auditLogUrl\n          isSCApp\n          scAddresses {\n            address\n            chain\n          }\n          profile {\n            author {\n              id\n            }\n            avatar\n            username\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetDappListDocument,
    "\n  mutation CreateZucityDappMutation($input: CreateZucityDappInfoInput!) {\n    createZucityDappInfo(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": typeof types.CreateZucityDappMutationDocument,
    "\n  mutation UpdateZucityDappMutation($input: UpdateZucityDappInfoInput!) {\n    updateZucityDappInfo(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": typeof types.UpdateZucityDappMutationDocument,
    "\n  query GetDappById($id: ID!) {\n    node(id: $id) {\n      ... on ZucityDappInfo {\n        id\n        appName\n        tagline\n        developerName\n        description\n        bannerUrl\n        categories\n        devStatus\n        openSource\n        repositoryUrl\n        appUrl\n        websiteUrl\n        docsUrl\n        isInstallable\n        appLogoUrl\n        auditLogUrl\n        isSCApp\n        scAddresses {\n          address\n          chain\n        }\n        profile {\n          author {\n            id\n          }\n          avatar\n          username\n        }\n      }\n    }\n  }\n": typeof types.GetDappByIdDocument,
    "\n  query GetAllEvents($first: Int) {\n    zucityEventIndex(first: $first) {\n      edges {\n        node {\n          id\n          description\n          profileId\n          tagline\n          customAttributes {\n            tbd\n          }\n          gated\n          superAdmin {\n            id\n          }\n          admins {\n            id\n          }\n          author {\n            id\n          }\n          customLinks {\n            links\n            title\n          }\n          createdAt\n          endTime\n          externalUrl\n          imageUrl\n          members {\n            id\n          }\n          participantCount\n          spaceId\n          startTime\n          status\n          supportChain\n          timezone\n          title\n          tracks\n        }\n      }\n    }\n  }\n": typeof types.GetAllEventsDocument,
    "\n    query GetEventByIds($ids: [ID!]!) {\n        nodes (ids: $ids) {\n            ...on ZucityEvent {\n                id\n                description\n                profileId\n                tagline\n                customAttributes {\n                    tbd\n                }\n                gated\n                superAdmin {\n                    id\n                }\n                admins {\n                    id\n                }\n                author {\n                    id\n                }\n                customLinks {\n                    links\n                    title\n                }\n                createdAt\n                endTime\n                externalUrl\n                imageUrl\n                members {\n                    id\n                }\n                participantCount\n                spaceId\n                startTime\n                status\n                supportChain\n                timezone\n                title\n                tracks\n            }\n        }\n    }\n": typeof types.GetEventByIdsDocument,
    "\n  query GetSpaceInvitations($resourceId: String) {\n    zucityInvitationIndex(\n      first: 100\n      filters: { where: { resourceId: { equalTo: $resourceId } } }\n    ) {\n      edges {\n        node {\n          id\n          resource\n          resourceId\n          inviterId {\n            id\n          }\n          inviterProfile {\n            id\n            username\n            address\n            avatar\n          }\n          inviteeProfile {\n            id\n            username\n            address\n            avatar\n          }\n          isRead\n          lastSentAt\n          message\n          roleId\n          eventId\n          event {\n            id\n            imageUrl\n            title\n          }\n          spaceId\n          space {\n            id\n            name\n            avatar\n          }\n          status\n          updatedAt\n          inviteeProfileId\n          author {\n            id\n          }\n          createdAt\n          expiresAt\n          inviterProfileId\n          customAttributes {\n            tbd\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpaceInvitationsDocument,
    "\n  query GetUserInvitations($inviteeId: String!) {\n    zucityInvitationIndex(\n      first: 100\n      filters: { where: { inviteeId: { equalTo: $inviteeId } } }\n    ) {\n      edges {\n        node {\n          id\n          resource\n          resourceId\n          inviterId {\n            id\n          }\n          inviteeId {\n            id\n          }\n          inviterProfile {\n            id\n            username\n            address\n            avatar\n          }\n          inviteeProfile {\n            id\n            username\n            address\n            avatar\n          }\n          isRead\n          lastSentAt\n          message\n          roleId\n          spaceId\n          space {\n            id\n            name\n          }\n          status\n          updatedAt\n          inviteeProfileId\n          author {\n            id\n          }\n          createdAt\n          eventId\n          expiresAt\n          inviterProfileId\n          customAttributes {\n            tbd\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetUserInvitationsDocument,
    "\n  query GetInvitationById($id: ID!) {\n    node(id: $id) {\n      ... on ZucityInvitation {\n        id\n        inviterId {\n          id\n        }\n        inviteeId {\n          id\n        }\n        resource\n        resourceId\n        roleId\n        status\n        message\n        isRead\n        inviteeProfileId\n        inviterProfileId\n        eventId\n        event {\n          id\n          imageUrl\n          title\n        }\n        spaceId\n        space {\n          id\n          name\n          avatar\n        }\n        createdAt\n        expiresAt\n        updatedAt\n        lastSentAt\n        inviterProfile {\n          id\n          username\n          address\n          avatar\n        }\n        inviteeProfile {\n          id\n          username\n          address\n          avatar\n        }\n      }\n    }\n  }\n": typeof types.GetInvitationByIdDocument,
    "\n  query ValidateRoleById($roleId: ID!, $resourceId: String!) {\n    zucityRoleIndex(\n      first: 1\n      filters: { where: { resourceId: { equalTo: $resourceId } } }\n    ) {\n      edges {\n        node {\n          id\n          name\n          source\n          color\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n": typeof types.ValidateRoleByIdDocument,
    "\n  query ValidateUserResourceAccess(\n    $userId: String!\n    $resourceId: String!\n    $source: String!\n  ) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $source }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.ValidateUserResourceAccessDocument,
    "\n  mutation CreateZucityInvitation($input: CreateZucityInvitationInput!) {\n    createZucityInvitation(input: $input) {\n      document {\n        id\n        resource\n        resourceId\n        inviterId {\n          id\n        }\n        inviterProfile {\n          id\n          username\n          address\n          avatar\n        }\n        inviteeProfile {\n          id\n          username\n          address\n          avatar\n        }\n        isRead\n        lastSentAt\n        message\n        roleId\n        spaceId\n        space {\n          id\n          name\n          avatar\n        }\n        status\n        updatedAt\n        inviteeProfileId\n        author {\n          id\n        }\n        createdAt\n        eventId\n        event {\n          id\n          imageUrl\n          title\n        }\n        expiresAt\n        inviterProfileId\n        customAttributes {\n          tbd\n        }\n      }\n    }\n  }\n": typeof types.CreateZucityInvitationDocument,
    "\n  mutation UpdateZucityInvitation($input: UpdateZucityInvitationInput!) {\n    updateZucityInvitation(input: $input) {\n      document {\n        id\n        author {\n          id\n        }\n        inviterId {\n          id\n        }\n        inviteeId {\n          id\n        }\n        resource\n        resourceId\n        roleId\n        status\n        message\n        isRead\n        inviterProfileId\n        inviterProfile {\n          id\n          username\n          avatar\n        }\n        inviteeProfileId\n        inviteeProfile {\n          id\n          username\n          avatar\n        }\n        createdAt\n        expiresAt\n        updatedAt\n        lastSentAt\n      }\n    }\n  }\n": typeof types.UpdateZucityInvitationDocument,
    "\n  query GetUnreadInvitationsCount($userId: String!) {\n    zucityInvitationCount(\n      filters: {\n        where: { isRead: { equalTo: \"false\" }, inviteeId: { equalTo: $userId } }\n      }\n    )\n  }\n": typeof types.GetUnreadInvitationsCountDocument,
    "\n  mutation MarkInvitationAsRead($invitationId: ID!) {\n    updateZucityInvitation(\n      input: { id: $invitationId, content: { isRead: \"true\" } }\n    ) {\n      document {\n        id\n        isRead\n      }\n    }\n  }\n": typeof types.MarkInvitationAsReadDocument,
    "\n  query SearchProfileByExactUsername($username: String!) {\n    zucityProfileIndex(\n      first: 20\n      filters: { where: { username: { equalTo: $username } } }\n    ) {\n      edges {\n        node {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.SearchProfileByExactUsernameDocument,
    "\n  query GetProfileByDID($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProfileByDidDocument,
    "\n  mutation CreateProfile($input: SetZucityProfileInput!) {\n    setZucityProfile(input: $input) {\n      document {\n        id\n        username\n      }\n    }\n  }\n": typeof types.CreateProfileDocument,
    "\n  query GetOwnProfile {\n    viewer {\n      zucityProfile {\n        author {\n          id\n        }\n        avatar\n        id\n        username\n      }\n    }\n  }\n": typeof types.GetOwnProfileDocument,
    "\nquery GetUserOwnSpace($did: ID!) {\n  node(id: $did) {\n    ... on CeramicAccount {\n      zucityProfile {\n        id\n        username\n        avatar\n        author {\n          id\n        }\n        spaces(first: 100) {\n          edges {\n            node {\n              id\n              author {\n                id\n              }\n              avatar\n              banner\n              name\n              description\n              category\n              color\n              profileId\n              customAttributes {\n                tbd\n              }\n              customLinks {\n                links\n                title\n              }\n              owner {\n                id\n              }\n              socialLinks {\n                links\n                title\n              }\n              tagline\n              tags {\n                tag\n              }\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": typeof types.GetUserOwnSpaceDocument,
    "\n  query GetUserOwnEvent($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          events(first: 100) {\n            edges {\n              node {\n                id\n                admins {\n                  id\n                }\n                createdAt\n                author {\n                  id\n                }\n                customAttributes {\n                  tbd\n                }\n                customLinks {\n                  links\n                  title\n                }\n                description\n                endTime\n                externalUrl\n                gated\n                imageUrl\n                members {\n                  id\n                }\n                participantCount\n                minParticipant\n                profileId\n                spaceId\n                startTime\n                status\n                superAdmin {\n                  id\n                }\n                supportChain\n                tagline\n                timezone\n                title\n                tracks\n              }\n            }\n          }\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n  ": typeof types.GetUserOwnEventDocument,
    "\n  query GetMembers($source: String, $resourceId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: {\n        where: {\n          source: { equalTo: $source }\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          roleId\n          customAttributes {\n            tbd\n          }\n          userId {\n            zucityProfile {\n              avatar\n              username\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetMembersDocument,
    "\n  query GetUserRole($userId: String, $resourceId: String, $resource: String) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $resource }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            zucityProfile {\n              avatar\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetUserRoleDocument,
    "\n  mutation CreateZucityUserRoles($input: CreateZucityUserRolesInput!) {\n    createZucityUserRoles(input: $input) {\n      document {\n        id\n        userId {\n          id\n        }\n        created_at\n        updated_at\n        resourceId\n        source\n        roleId\n      }\n    }\n  }\n": typeof types.CreateZucityUserRolesDocument,
    "\n  mutation enableIndexingZucityUserRoles(\n    $input: EnableIndexingZucityUserRolesInput!\n  ) {\n    enableIndexingZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": typeof types.EnableIndexingZucityUserRolesDocument,
    "\n  mutation UpdateZucityUserRoles($input: UpdateZucityUserRolesInput!) {\n    updateZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": typeof types.UpdateZucityUserRolesDocument,
    "\n  query GetUserRoles($userId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: { where: { userId: { equalTo: $userId } } }\n    ) {\n      edges {\n        node {\n          roleId\n          resourceId\n          source\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetUserRolesDocument,
    "\n  query GetRolesFromCeramic($resourceId: String) {\n    zucityRolePermissionIndex(\n      first: 1000\n      filters: {\n        where: {\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          permissionIds\n          resourceId\n          source\n          level\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n": typeof types.GetRolesFromCeramicDocument,
    "\n  query GetSpace($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n        announcements(first: 100) {\n          edges {\n            node {\n              id\n              createdAt\n            }\n          }\n        }\n        installedApps(first: 100) {\n          edges {\n            node {\n              id\n              sourceId\n              spaceId\n              nativeAppName\n              installedAppId\n              createdAt\n              updatedAt\n              installedApp {\n                id\n                appName\n                appType\n                description\n                tagline\n                bannerUrl\n                appUrl\n                openSource\n                devStatus\n                developerName\n                categories\n                appLogoUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpaceDocument,
    "\n  query GetSpaceByIds($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpaceByIdsDocument,
    "\n  mutation InstallDappToSpace($input: CreateZucityInstalledAppInput!) {\n    createZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        nativeAppName\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.InstallDappToSpaceDocument,
    "\n  query GetSpaceInstalledApps(\n    $filters: ZucityInstalledAppFiltersInput\n    $first: Int\n    $after: String\n  ) {\n    zucityInstalledAppIndex(filters: $filters, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          sourceId\n          spaceId\n          nativeAppName\n          installedAppId\n          createdAt\n          updatedAt\n          installedApp {\n            id\n            appName\n            appType\n            description\n            tagline\n            bannerUrl\n            appUrl\n            openSource\n            devStatus\n            developerName\n            categories\n            appLogoUrl\n          }\n          space {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": typeof types.GetSpaceInstalledAppsDocument,
    "\n  mutation UninstallDappFromSpace(\n    $input: EnableIndexingZucityInstalledAppInput!\n  ) {\n    enableIndexingZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.UninstallDappFromSpaceDocument,
    "\n  mutation createZucitySpaceMutation($input: CreateZucitySpaceInput!) {\n    createZucitySpace(input: $input) {\n      document {\n        id\n        name\n        description\n        profileId\n        avatar\n        banner\n        category\n      }\n    }\n  }\n": typeof types.CreateZucitySpaceMutationDocument,
    "\n  query GetSpaces($first: Int) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpacesDocument,
    "\n  query GetSpaceAndEvents($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n        events(first: 100) {\n          edges {\n            node {\n              createdAt\n              description\n              endTime\n              externalUrl\n              gated\n              id\n              imageUrl\n              maxParticipant\n              meetingUrl\n              minParticipant\n              participantCount\n              profileId\n              spaceId\n              startTime\n              status\n              tagline\n              timezone\n              title\n              space {\n                name\n                avatar\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpaceAndEventsDocument,
    "\n  query GetSpacesAndMembers(\n    $first: Int\n    $userRolesFirst: Int = 100\n    $userRolesFilters: ZucityUserRolesFiltersInput\n  ) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n          userRoles(filters: $userRolesFilters, first: $userRolesFirst) {\n            edges {\n              node {\n                roleId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpacesAndMembersDocument,
};
const documents: Documents = {
    "\n  mutation CreateZucityAnnouncementMutation($input: CreateZucityAnnouncementInput!) {\n    createZucityAnnouncement(input: $input) {\n      document {\n        id\n        title\n        description\n        createdAt\n        updatedAt\n        sourceId\n        spaceId\n        eventId\n        space {\n          id\n          name\n        }\n        event {\n          id\n          title\n        }\n      }\n    }\n  }\n": types.CreateZucityAnnouncementMutationDocument,
    "\n  mutation UpdateZucityAnnouncementMutation($input: UpdateZucityAnnouncementInput!) {\n    updateZucityAnnouncement(input: $input) {\n      document {\n        id\n        title\n        description\n        updatedAt\n      }\n    }\n  }\n": types.UpdateZucityAnnouncementMutationDocument,
    "\n  mutation EnableIndexingZucityAnnouncement($input: EnableIndexingZucityAnnouncementInput!) {\n    enableIndexingZucityAnnouncement(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.EnableIndexingZucityAnnouncementDocument,
    "\n  query GetSpaceAnnouncements($id: ID!, $first: Int = 100) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        announcements(first: $first) {\n          edges {\n            node {\n              id\n              title\n              tags {\n                tag\n              }\n              description\n              createdAt\n              updatedAt\n              sourceId\n              author {\n                id\n                zucityProfile {\n                  avatar\n                  username\n                }\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": types.GetSpaceAnnouncementsDocument,
    "\n  query GetEventAnnouncements($id: ID!, $first: Int = 100) {\n    node(id: $id) {\n      ... on ZucityEvent {\n        announcements(first: $first) {\n          edges {\n            node {\n              id\n              title\n              tags {\n                tag\n              }\n              description\n              createdAt\n              updatedAt\n              sourceId\n              author {\n                id\n                zucityProfile {\n                  avatar\n                  username\n                }\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": types.GetEventAnnouncementsDocument,
    "\n  query GetDappList($first: Int = 100, $filters: ZucityDappInfoFiltersInput) {\n    zucityDappInfoIndex(first: $first, filters: $filters) {\n      edges {\n        node {\n          id\n          appName\n          tagline\n          developerName\n          description\n          bannerUrl\n          categories\n          devStatus\n          openSource\n          repositoryUrl\n          appUrl\n          websiteUrl\n          docsUrl\n          isInstallable\n          appLogoUrl\n          auditLogUrl\n          isSCApp\n          scAddresses {\n            address\n            chain\n          }\n          profile {\n            author {\n              id\n            }\n            avatar\n            username\n          }\n        }\n      }\n    }\n  }\n": types.GetDappListDocument,
    "\n  mutation CreateZucityDappMutation($input: CreateZucityDappInfoInput!) {\n    createZucityDappInfo(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.CreateZucityDappMutationDocument,
    "\n  mutation UpdateZucityDappMutation($input: UpdateZucityDappInfoInput!) {\n    updateZucityDappInfo(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.UpdateZucityDappMutationDocument,
    "\n  query GetDappById($id: ID!) {\n    node(id: $id) {\n      ... on ZucityDappInfo {\n        id\n        appName\n        tagline\n        developerName\n        description\n        bannerUrl\n        categories\n        devStatus\n        openSource\n        repositoryUrl\n        appUrl\n        websiteUrl\n        docsUrl\n        isInstallable\n        appLogoUrl\n        auditLogUrl\n        isSCApp\n        scAddresses {\n          address\n          chain\n        }\n        profile {\n          author {\n            id\n          }\n          avatar\n          username\n        }\n      }\n    }\n  }\n": types.GetDappByIdDocument,
    "\n  query GetAllEvents($first: Int) {\n    zucityEventIndex(first: $first) {\n      edges {\n        node {\n          id\n          description\n          profileId\n          tagline\n          customAttributes {\n            tbd\n          }\n          gated\n          superAdmin {\n            id\n          }\n          admins {\n            id\n          }\n          author {\n            id\n          }\n          customLinks {\n            links\n            title\n          }\n          createdAt\n          endTime\n          externalUrl\n          imageUrl\n          members {\n            id\n          }\n          participantCount\n          spaceId\n          startTime\n          status\n          supportChain\n          timezone\n          title\n          tracks\n        }\n      }\n    }\n  }\n": types.GetAllEventsDocument,
    "\n    query GetEventByIds($ids: [ID!]!) {\n        nodes (ids: $ids) {\n            ...on ZucityEvent {\n                id\n                description\n                profileId\n                tagline\n                customAttributes {\n                    tbd\n                }\n                gated\n                superAdmin {\n                    id\n                }\n                admins {\n                    id\n                }\n                author {\n                    id\n                }\n                customLinks {\n                    links\n                    title\n                }\n                createdAt\n                endTime\n                externalUrl\n                imageUrl\n                members {\n                    id\n                }\n                participantCount\n                spaceId\n                startTime\n                status\n                supportChain\n                timezone\n                title\n                tracks\n            }\n        }\n    }\n": types.GetEventByIdsDocument,
    "\n  query GetSpaceInvitations($resourceId: String) {\n    zucityInvitationIndex(\n      first: 100\n      filters: { where: { resourceId: { equalTo: $resourceId } } }\n    ) {\n      edges {\n        node {\n          id\n          resource\n          resourceId\n          inviterId {\n            id\n          }\n          inviterProfile {\n            id\n            username\n            address\n            avatar\n          }\n          inviteeProfile {\n            id\n            username\n            address\n            avatar\n          }\n          isRead\n          lastSentAt\n          message\n          roleId\n          eventId\n          event {\n            id\n            imageUrl\n            title\n          }\n          spaceId\n          space {\n            id\n            name\n            avatar\n          }\n          status\n          updatedAt\n          inviteeProfileId\n          author {\n            id\n          }\n          createdAt\n          expiresAt\n          inviterProfileId\n          customAttributes {\n            tbd\n          }\n        }\n      }\n    }\n  }\n": types.GetSpaceInvitationsDocument,
    "\n  query GetUserInvitations($inviteeId: String!) {\n    zucityInvitationIndex(\n      first: 100\n      filters: { where: { inviteeId: { equalTo: $inviteeId } } }\n    ) {\n      edges {\n        node {\n          id\n          resource\n          resourceId\n          inviterId {\n            id\n          }\n          inviteeId {\n            id\n          }\n          inviterProfile {\n            id\n            username\n            address\n            avatar\n          }\n          inviteeProfile {\n            id\n            username\n            address\n            avatar\n          }\n          isRead\n          lastSentAt\n          message\n          roleId\n          spaceId\n          space {\n            id\n            name\n          }\n          status\n          updatedAt\n          inviteeProfileId\n          author {\n            id\n          }\n          createdAt\n          eventId\n          expiresAt\n          inviterProfileId\n          customAttributes {\n            tbd\n          }\n        }\n      }\n    }\n  }\n": types.GetUserInvitationsDocument,
    "\n  query GetInvitationById($id: ID!) {\n    node(id: $id) {\n      ... on ZucityInvitation {\n        id\n        inviterId {\n          id\n        }\n        inviteeId {\n          id\n        }\n        resource\n        resourceId\n        roleId\n        status\n        message\n        isRead\n        inviteeProfileId\n        inviterProfileId\n        eventId\n        event {\n          id\n          imageUrl\n          title\n        }\n        spaceId\n        space {\n          id\n          name\n          avatar\n        }\n        createdAt\n        expiresAt\n        updatedAt\n        lastSentAt\n        inviterProfile {\n          id\n          username\n          address\n          avatar\n        }\n        inviteeProfile {\n          id\n          username\n          address\n          avatar\n        }\n      }\n    }\n  }\n": types.GetInvitationByIdDocument,
    "\n  query ValidateRoleById($roleId: ID!, $resourceId: String!) {\n    zucityRoleIndex(\n      first: 1\n      filters: { where: { resourceId: { equalTo: $resourceId } } }\n    ) {\n      edges {\n        node {\n          id\n          name\n          source\n          color\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n": types.ValidateRoleByIdDocument,
    "\n  query ValidateUserResourceAccess(\n    $userId: String!\n    $resourceId: String!\n    $source: String!\n  ) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $source }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.ValidateUserResourceAccessDocument,
    "\n  mutation CreateZucityInvitation($input: CreateZucityInvitationInput!) {\n    createZucityInvitation(input: $input) {\n      document {\n        id\n        resource\n        resourceId\n        inviterId {\n          id\n        }\n        inviterProfile {\n          id\n          username\n          address\n          avatar\n        }\n        inviteeProfile {\n          id\n          username\n          address\n          avatar\n        }\n        isRead\n        lastSentAt\n        message\n        roleId\n        spaceId\n        space {\n          id\n          name\n          avatar\n        }\n        status\n        updatedAt\n        inviteeProfileId\n        author {\n          id\n        }\n        createdAt\n        eventId\n        event {\n          id\n          imageUrl\n          title\n        }\n        expiresAt\n        inviterProfileId\n        customAttributes {\n          tbd\n        }\n      }\n    }\n  }\n": types.CreateZucityInvitationDocument,
    "\n  mutation UpdateZucityInvitation($input: UpdateZucityInvitationInput!) {\n    updateZucityInvitation(input: $input) {\n      document {\n        id\n        author {\n          id\n        }\n        inviterId {\n          id\n        }\n        inviteeId {\n          id\n        }\n        resource\n        resourceId\n        roleId\n        status\n        message\n        isRead\n        inviterProfileId\n        inviterProfile {\n          id\n          username\n          avatar\n        }\n        inviteeProfileId\n        inviteeProfile {\n          id\n          username\n          avatar\n        }\n        createdAt\n        expiresAt\n        updatedAt\n        lastSentAt\n      }\n    }\n  }\n": types.UpdateZucityInvitationDocument,
    "\n  query GetUnreadInvitationsCount($userId: String!) {\n    zucityInvitationCount(\n      filters: {\n        where: { isRead: { equalTo: \"false\" }, inviteeId: { equalTo: $userId } }\n      }\n    )\n  }\n": types.GetUnreadInvitationsCountDocument,
    "\n  mutation MarkInvitationAsRead($invitationId: ID!) {\n    updateZucityInvitation(\n      input: { id: $invitationId, content: { isRead: \"true\" } }\n    ) {\n      document {\n        id\n        isRead\n      }\n    }\n  }\n": types.MarkInvitationAsReadDocument,
    "\n  query SearchProfileByExactUsername($username: String!) {\n    zucityProfileIndex(\n      first: 20\n      filters: { where: { username: { equalTo: $username } } }\n    ) {\n      edges {\n        node {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.SearchProfileByExactUsernameDocument,
    "\n  query GetProfileByDID($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetProfileByDidDocument,
    "\n  mutation CreateProfile($input: SetZucityProfileInput!) {\n    setZucityProfile(input: $input) {\n      document {\n        id\n        username\n      }\n    }\n  }\n": types.CreateProfileDocument,
    "\n  query GetOwnProfile {\n    viewer {\n      zucityProfile {\n        author {\n          id\n        }\n        avatar\n        id\n        username\n      }\n    }\n  }\n": types.GetOwnProfileDocument,
    "\nquery GetUserOwnSpace($did: ID!) {\n  node(id: $did) {\n    ... on CeramicAccount {\n      zucityProfile {\n        id\n        username\n        avatar\n        author {\n          id\n        }\n        spaces(first: 100) {\n          edges {\n            node {\n              id\n              author {\n                id\n              }\n              avatar\n              banner\n              name\n              description\n              category\n              color\n              profileId\n              customAttributes {\n                tbd\n              }\n              customLinks {\n                links\n                title\n              }\n              owner {\n                id\n              }\n              socialLinks {\n                links\n                title\n              }\n              tagline\n              tags {\n                tag\n              }\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}\n": types.GetUserOwnSpaceDocument,
    "\n  query GetUserOwnEvent($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          events(first: 100) {\n            edges {\n              node {\n                id\n                admins {\n                  id\n                }\n                createdAt\n                author {\n                  id\n                }\n                customAttributes {\n                  tbd\n                }\n                customLinks {\n                  links\n                  title\n                }\n                description\n                endTime\n                externalUrl\n                gated\n                imageUrl\n                members {\n                  id\n                }\n                participantCount\n                minParticipant\n                profileId\n                spaceId\n                startTime\n                status\n                superAdmin {\n                  id\n                }\n                supportChain\n                tagline\n                timezone\n                title\n                tracks\n              }\n            }\n          }\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n  ": types.GetUserOwnEventDocument,
    "\n  query GetMembers($source: String, $resourceId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: {\n        where: {\n          source: { equalTo: $source }\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          roleId\n          customAttributes {\n            tbd\n          }\n          userId {\n            zucityProfile {\n              avatar\n              username\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetMembersDocument,
    "\n  query GetUserRole($userId: String, $resourceId: String, $resource: String) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $resource }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            zucityProfile {\n              avatar\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetUserRoleDocument,
    "\n  mutation CreateZucityUserRoles($input: CreateZucityUserRolesInput!) {\n    createZucityUserRoles(input: $input) {\n      document {\n        id\n        userId {\n          id\n        }\n        created_at\n        updated_at\n        resourceId\n        source\n        roleId\n      }\n    }\n  }\n": types.CreateZucityUserRolesDocument,
    "\n  mutation enableIndexingZucityUserRoles(\n    $input: EnableIndexingZucityUserRolesInput!\n  ) {\n    enableIndexingZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.EnableIndexingZucityUserRolesDocument,
    "\n  mutation UpdateZucityUserRoles($input: UpdateZucityUserRolesInput!) {\n    updateZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.UpdateZucityUserRolesDocument,
    "\n  query GetUserRoles($userId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: { where: { userId: { equalTo: $userId } } }\n    ) {\n      edges {\n        node {\n          roleId\n          resourceId\n          source\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetUserRolesDocument,
    "\n  query GetRolesFromCeramic($resourceId: String) {\n    zucityRolePermissionIndex(\n      first: 1000\n      filters: {\n        where: {\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          permissionIds\n          resourceId\n          source\n          level\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n": types.GetRolesFromCeramicDocument,
    "\n  query GetSpace($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n        announcements(first: 100) {\n          edges {\n            node {\n              id\n              createdAt\n            }\n          }\n        }\n        installedApps(first: 100) {\n          edges {\n            node {\n              id\n              sourceId\n              spaceId\n              nativeAppName\n              installedAppId\n              createdAt\n              updatedAt\n              installedApp {\n                id\n                appName\n                appType\n                description\n                tagline\n                bannerUrl\n                appUrl\n                openSource\n                devStatus\n                developerName\n                categories\n                appLogoUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSpaceDocument,
    "\n  query GetSpaceByIds($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n      }\n    }\n  }\n": types.GetSpaceByIdsDocument,
    "\n  mutation InstallDappToSpace($input: CreateZucityInstalledAppInput!) {\n    createZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        nativeAppName\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.InstallDappToSpaceDocument,
    "\n  query GetSpaceInstalledApps(\n    $filters: ZucityInstalledAppFiltersInput\n    $first: Int\n    $after: String\n  ) {\n    zucityInstalledAppIndex(filters: $filters, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          sourceId\n          spaceId\n          nativeAppName\n          installedAppId\n          createdAt\n          updatedAt\n          installedApp {\n            id\n            appName\n            appType\n            description\n            tagline\n            bannerUrl\n            appUrl\n            openSource\n            devStatus\n            developerName\n            categories\n            appLogoUrl\n          }\n          space {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": types.GetSpaceInstalledAppsDocument,
    "\n  mutation UninstallDappFromSpace(\n    $input: EnableIndexingZucityInstalledAppInput!\n  ) {\n    enableIndexingZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.UninstallDappFromSpaceDocument,
    "\n  mutation createZucitySpaceMutation($input: CreateZucitySpaceInput!) {\n    createZucitySpace(input: $input) {\n      document {\n        id\n        name\n        description\n        profileId\n        avatar\n        banner\n        category\n      }\n    }\n  }\n": types.CreateZucitySpaceMutationDocument,
    "\n  query GetSpaces($first: Int) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSpacesDocument,
    "\n  query GetSpaceAndEvents($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n        events(first: 100) {\n          edges {\n            node {\n              createdAt\n              description\n              endTime\n              externalUrl\n              gated\n              id\n              imageUrl\n              maxParticipant\n              meetingUrl\n              minParticipant\n              participantCount\n              profileId\n              spaceId\n              startTime\n              status\n              tagline\n              timezone\n              title\n              space {\n                name\n                avatar\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSpaceAndEventsDocument,
    "\n  query GetSpacesAndMembers(\n    $first: Int\n    $userRolesFirst: Int = 100\n    $userRolesFilters: ZucityUserRolesFiltersInput\n  ) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n          userRoles(filters: $userRolesFilters, first: $userRolesFirst) {\n            edges {\n              node {\n                roleId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSpacesAndMembersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateZucityAnnouncementMutation($input: CreateZucityAnnouncementInput!) {\n    createZucityAnnouncement(input: $input) {\n      document {\n        id\n        title\n        description\n        createdAt\n        updatedAt\n        sourceId\n        spaceId\n        eventId\n        space {\n          id\n          name\n        }\n        event {\n          id\n          title\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CreateZucityAnnouncementMutationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateZucityAnnouncementMutation($input: UpdateZucityAnnouncementInput!) {\n    updateZucityAnnouncement(input: $input) {\n      document {\n        id\n        title\n        description\n        updatedAt\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateZucityAnnouncementMutationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EnableIndexingZucityAnnouncement($input: EnableIndexingZucityAnnouncementInput!) {\n    enableIndexingZucityAnnouncement(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').EnableIndexingZucityAnnouncementDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaceAnnouncements($id: ID!, $first: Int = 100) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        announcements(first: $first) {\n          edges {\n            node {\n              id\n              title\n              tags {\n                tag\n              }\n              description\n              createdAt\n              updatedAt\n              sourceId\n              author {\n                id\n                zucityProfile {\n                  avatar\n                  username\n                }\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceAnnouncementsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventAnnouncements($id: ID!, $first: Int = 100) {\n    node(id: $id) {\n      ... on ZucityEvent {\n        announcements(first: $first) {\n          edges {\n            node {\n              id\n              title\n              tags {\n                tag\n              }\n              description\n              createdAt\n              updatedAt\n              sourceId\n              author {\n                id\n                zucityProfile {\n                  avatar\n                  username\n                }\n              }\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetEventAnnouncementsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDappList($first: Int = 100, $filters: ZucityDappInfoFiltersInput) {\n    zucityDappInfoIndex(first: $first, filters: $filters) {\n      edges {\n        node {\n          id\n          appName\n          tagline\n          developerName\n          description\n          bannerUrl\n          categories\n          devStatus\n          openSource\n          repositoryUrl\n          appUrl\n          websiteUrl\n          docsUrl\n          isInstallable\n          appLogoUrl\n          auditLogUrl\n          isSCApp\n          scAddresses {\n            address\n            chain\n          }\n          profile {\n            author {\n              id\n            }\n            avatar\n            username\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetDappListDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateZucityDappMutation($input: CreateZucityDappInfoInput!) {\n    createZucityDappInfo(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').CreateZucityDappMutationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateZucityDappMutation($input: UpdateZucityDappInfoInput!) {\n    updateZucityDappInfo(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateZucityDappMutationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDappById($id: ID!) {\n    node(id: $id) {\n      ... on ZucityDappInfo {\n        id\n        appName\n        tagline\n        developerName\n        description\n        bannerUrl\n        categories\n        devStatus\n        openSource\n        repositoryUrl\n        appUrl\n        websiteUrl\n        docsUrl\n        isInstallable\n        appLogoUrl\n        auditLogUrl\n        isSCApp\n        scAddresses {\n          address\n          chain\n        }\n        profile {\n          author {\n            id\n          }\n          avatar\n          username\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetDappByIdDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllEvents($first: Int) {\n    zucityEventIndex(first: $first) {\n      edges {\n        node {\n          id\n          description\n          profileId\n          tagline\n          customAttributes {\n            tbd\n          }\n          gated\n          superAdmin {\n            id\n          }\n          admins {\n            id\n          }\n          author {\n            id\n          }\n          customLinks {\n            links\n            title\n          }\n          createdAt\n          endTime\n          externalUrl\n          imageUrl\n          members {\n            id\n          }\n          participantCount\n          spaceId\n          startTime\n          status\n          supportChain\n          timezone\n          title\n          tracks\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetAllEventsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetEventByIds($ids: [ID!]!) {\n        nodes (ids: $ids) {\n            ...on ZucityEvent {\n                id\n                description\n                profileId\n                tagline\n                customAttributes {\n                    tbd\n                }\n                gated\n                superAdmin {\n                    id\n                }\n                admins {\n                    id\n                }\n                author {\n                    id\n                }\n                customLinks {\n                    links\n                    title\n                }\n                createdAt\n                endTime\n                externalUrl\n                imageUrl\n                members {\n                    id\n                }\n                participantCount\n                spaceId\n                startTime\n                status\n                supportChain\n                timezone\n                title\n                tracks\n            }\n        }\n    }\n"): typeof import('./graphql').GetEventByIdsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaceInvitations($resourceId: String) {\n    zucityInvitationIndex(\n      first: 100\n      filters: { where: { resourceId: { equalTo: $resourceId } } }\n    ) {\n      edges {\n        node {\n          id\n          resource\n          resourceId\n          inviterId {\n            id\n          }\n          inviterProfile {\n            id\n            username\n            address\n            avatar\n          }\n          inviteeProfile {\n            id\n            username\n            address\n            avatar\n          }\n          isRead\n          lastSentAt\n          message\n          roleId\n          eventId\n          event {\n            id\n            imageUrl\n            title\n          }\n          spaceId\n          space {\n            id\n            name\n            avatar\n          }\n          status\n          updatedAt\n          inviteeProfileId\n          author {\n            id\n          }\n          createdAt\n          expiresAt\n          inviterProfileId\n          customAttributes {\n            tbd\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceInvitationsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserInvitations($inviteeId: String!) {\n    zucityInvitationIndex(\n      first: 100\n      filters: { where: { inviteeId: { equalTo: $inviteeId } } }\n    ) {\n      edges {\n        node {\n          id\n          resource\n          resourceId\n          inviterId {\n            id\n          }\n          inviteeId {\n            id\n          }\n          inviterProfile {\n            id\n            username\n            address\n            avatar\n          }\n          inviteeProfile {\n            id\n            username\n            address\n            avatar\n          }\n          isRead\n          lastSentAt\n          message\n          roleId\n          spaceId\n          space {\n            id\n            name\n          }\n          status\n          updatedAt\n          inviteeProfileId\n          author {\n            id\n          }\n          createdAt\n          eventId\n          expiresAt\n          inviterProfileId\n          customAttributes {\n            tbd\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetUserInvitationsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetInvitationById($id: ID!) {\n    node(id: $id) {\n      ... on ZucityInvitation {\n        id\n        inviterId {\n          id\n        }\n        inviteeId {\n          id\n        }\n        resource\n        resourceId\n        roleId\n        status\n        message\n        isRead\n        inviteeProfileId\n        inviterProfileId\n        eventId\n        event {\n          id\n          imageUrl\n          title\n        }\n        spaceId\n        space {\n          id\n          name\n          avatar\n        }\n        createdAt\n        expiresAt\n        updatedAt\n        lastSentAt\n        inviterProfile {\n          id\n          username\n          address\n          avatar\n        }\n        inviteeProfile {\n          id\n          username\n          address\n          avatar\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetInvitationByIdDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ValidateRoleById($roleId: ID!, $resourceId: String!) {\n    zucityRoleIndex(\n      first: 1\n      filters: { where: { resourceId: { equalTo: $resourceId } } }\n    ) {\n      edges {\n        node {\n          id\n          name\n          source\n          color\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ValidateRoleByIdDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ValidateUserResourceAccess(\n    $userId: String!\n    $resourceId: String!\n    $source: String!\n  ) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $source }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').ValidateUserResourceAccessDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateZucityInvitation($input: CreateZucityInvitationInput!) {\n    createZucityInvitation(input: $input) {\n      document {\n        id\n        resource\n        resourceId\n        inviterId {\n          id\n        }\n        inviterProfile {\n          id\n          username\n          address\n          avatar\n        }\n        inviteeProfile {\n          id\n          username\n          address\n          avatar\n        }\n        isRead\n        lastSentAt\n        message\n        roleId\n        spaceId\n        space {\n          id\n          name\n          avatar\n        }\n        status\n        updatedAt\n        inviteeProfileId\n        author {\n          id\n        }\n        createdAt\n        eventId\n        event {\n          id\n          imageUrl\n          title\n        }\n        expiresAt\n        inviterProfileId\n        customAttributes {\n          tbd\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').CreateZucityInvitationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateZucityInvitation($input: UpdateZucityInvitationInput!) {\n    updateZucityInvitation(input: $input) {\n      document {\n        id\n        author {\n          id\n        }\n        inviterId {\n          id\n        }\n        inviteeId {\n          id\n        }\n        resource\n        resourceId\n        roleId\n        status\n        message\n        isRead\n        inviterProfileId\n        inviterProfile {\n          id\n          username\n          avatar\n        }\n        inviteeProfileId\n        inviteeProfile {\n          id\n          username\n          avatar\n        }\n        createdAt\n        expiresAt\n        updatedAt\n        lastSentAt\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateZucityInvitationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUnreadInvitationsCount($userId: String!) {\n    zucityInvitationCount(\n      filters: {\n        where: { isRead: { equalTo: \"false\" }, inviteeId: { equalTo: $userId } }\n      }\n    )\n  }\n"): typeof import('./graphql').GetUnreadInvitationsCountDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MarkInvitationAsRead($invitationId: ID!) {\n    updateZucityInvitation(\n      input: { id: $invitationId, content: { isRead: \"true\" } }\n    ) {\n      document {\n        id\n        isRead\n      }\n    }\n  }\n"): typeof import('./graphql').MarkInvitationAsReadDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchProfileByExactUsername($username: String!) {\n    zucityProfileIndex(\n      first: 20\n      filters: { where: { username: { equalTo: $username } } }\n    ) {\n      edges {\n        node {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').SearchProfileByExactUsernameDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProfileByDID($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetProfileByDidDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProfile($input: SetZucityProfileInput!) {\n    setZucityProfile(input: $input) {\n      document {\n        id\n        username\n      }\n    }\n  }\n"): typeof import('./graphql').CreateProfileDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOwnProfile {\n    viewer {\n      zucityProfile {\n        author {\n          id\n        }\n        avatar\n        id\n        username\n      }\n    }\n  }\n"): typeof import('./graphql').GetOwnProfileDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetUserOwnSpace($did: ID!) {\n  node(id: $did) {\n    ... on CeramicAccount {\n      zucityProfile {\n        id\n        username\n        avatar\n        author {\n          id\n        }\n        spaces(first: 100) {\n          edges {\n            node {\n              id\n              author {\n                id\n              }\n              avatar\n              banner\n              name\n              description\n              category\n              color\n              profileId\n              customAttributes {\n                tbd\n              }\n              customLinks {\n                links\n                title\n              }\n              owner {\n                id\n              }\n              socialLinks {\n                links\n                title\n              }\n              tagline\n              tags {\n                tag\n              }\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"): typeof import('./graphql').GetUserOwnSpaceDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserOwnEvent($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          events(first: 100) {\n            edges {\n              node {\n                id\n                admins {\n                  id\n                }\n                createdAt\n                author {\n                  id\n                }\n                customAttributes {\n                  tbd\n                }\n                customLinks {\n                  links\n                  title\n                }\n                description\n                endTime\n                externalUrl\n                gated\n                imageUrl\n                members {\n                  id\n                }\n                participantCount\n                minParticipant\n                profileId\n                spaceId\n                startTime\n                status\n                superAdmin {\n                  id\n                }\n                supportChain\n                tagline\n                timezone\n                title\n                tracks\n              }\n            }\n          }\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n  "): typeof import('./graphql').GetUserOwnEventDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMembers($source: String, $resourceId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: {\n        where: {\n          source: { equalTo: $source }\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          roleId\n          customAttributes {\n            tbd\n          }\n          userId {\n            zucityProfile {\n              avatar\n              username\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetMembersDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserRole($userId: String, $resourceId: String, $resource: String) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $resource }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            zucityProfile {\n              avatar\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetUserRoleDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateZucityUserRoles($input: CreateZucityUserRolesInput!) {\n    createZucityUserRoles(input: $input) {\n      document {\n        id\n        userId {\n          id\n        }\n        created_at\n        updated_at\n        resourceId\n        source\n        roleId\n      }\n    }\n  }\n"): typeof import('./graphql').CreateZucityUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation enableIndexingZucityUserRoles(\n    $input: EnableIndexingZucityUserRolesInput!\n  ) {\n    enableIndexingZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').EnableIndexingZucityUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateZucityUserRoles($input: UpdateZucityUserRolesInput!) {\n    updateZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateZucityUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserRoles($userId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: { where: { userId: { equalTo: $userId } } }\n    ) {\n      edges {\n        node {\n          roleId\n          resourceId\n          source\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetRolesFromCeramic($resourceId: String) {\n    zucityRolePermissionIndex(\n      first: 1000\n      filters: {\n        where: {\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          permissionIds\n          resourceId\n          source\n          level\n          created_at\n          updated_at\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetRolesFromCeramicDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpace($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n        announcements(first: 100) {\n          edges {\n            node {\n              id\n              createdAt\n            }\n          }\n        }\n        installedApps(first: 100) {\n          edges {\n            node {\n              id\n              sourceId\n              spaceId\n              nativeAppName\n              installedAppId\n              createdAt\n              updatedAt\n              installedApp {\n                id\n                appName\n                appType\n                description\n                tagline\n                bannerUrl\n                appUrl\n                openSource\n                devStatus\n                developerName\n                categories\n                appLogoUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaceByIds($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceByIdsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InstallDappToSpace($input: CreateZucityInstalledAppInput!) {\n    createZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        nativeAppName\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): typeof import('./graphql').InstallDappToSpaceDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaceInstalledApps(\n    $filters: ZucityInstalledAppFiltersInput\n    $first: Int\n    $after: String\n  ) {\n    zucityInstalledAppIndex(filters: $filters, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          sourceId\n          spaceId\n          nativeAppName\n          installedAppId\n          createdAt\n          updatedAt\n          installedApp {\n            id\n            appName\n            appType\n            description\n            tagline\n            bannerUrl\n            appUrl\n            openSource\n            devStatus\n            developerName\n            categories\n            appLogoUrl\n          }\n          space {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceInstalledAppsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UninstallDappFromSpace(\n    $input: EnableIndexingZucityInstalledAppInput!\n  ) {\n    enableIndexingZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): typeof import('./graphql').UninstallDappFromSpaceDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createZucitySpaceMutation($input: CreateZucitySpaceInput!) {\n    createZucitySpace(input: $input) {\n      document {\n        id\n        name\n        description\n        profileId\n        avatar\n        banner\n        category\n      }\n    }\n  }\n"): typeof import('./graphql').CreateZucitySpaceMutationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaces($first: Int) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpacesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaceAndEvents($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n        events(first: 100) {\n          edges {\n            node {\n              createdAt\n              description\n              endTime\n              externalUrl\n              gated\n              id\n              imageUrl\n              maxParticipant\n              meetingUrl\n              minParticipant\n              participantCount\n              profileId\n              spaceId\n              startTime\n              status\n              tagline\n              timezone\n              title\n              space {\n                name\n                avatar\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceAndEventsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpacesAndMembers(\n    $first: Int\n    $userRolesFirst: Int = 100\n    $userRolesFilters: ZucityUserRolesFiltersInput\n  ) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n          userRoles(filters: $userRolesFilters, first: $userRolesFirst) {\n            edges {\n              node {\n                roleId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpacesAndMembersDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
