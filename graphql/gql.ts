/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query GetDappList {\n    zucityDappInfoIndex(first: 100) {\n      edges {\n        node {\n          id\n          appName\n          tagline\n          developerName\n          description\n          bannerUrl\n          categories\n          devStatus\n          openSource\n          repositoryUrl\n          appUrl\n          websiteUrl\n          docsUrl\n          profile {\n            author {\n              id\n            }\n            avatar\n            username\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetDappListDocument,
    "\n  query SearchProfileByExactUsername($username: String!) {\n    zucityProfileIndex(\n      first: 20\n      filters: { where: { username: { equalTo: $username } } }\n    ) {\n      edges {\n        node {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.SearchProfileByExactUsernameDocument,
    "\n  query GetProfileByDID($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetProfileByDidDocument,
    "\n  mutation CreateProfile($input: SetZucityProfileInput!) {\n    setZucityProfile(input: $input) {\n      document {\n        id\n        username\n      }\n    }\n  }\n": typeof types.CreateProfileDocument,
    "\n  query GetOwnProfile {\n    viewer {\n      zucityProfile {\n        author {\n          id\n        }\n        avatar\n        id\n        username\n      }\n    }\n  }\n": typeof types.GetOwnProfileDocument,
    "\n  query GetMembers($source: String, $resourceId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: {\n        where: {\n          source: { equalTo: $source }\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          roleId\n          customAttributes {\n            tbd\n          }\n          userId {\n            zucityProfile {\n              avatar\n              username\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetMembersDocument,
    "\n  query GetUserRole($userId: String, $resourceId: String, $resource: String) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $resource }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            zucityProfile {\n              avatar\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetUserRoleDocument,
    "\n  mutation CreateZucityUserRoles($input: CreateZucityUserRolesInput!) {\n    createZucityUserRoles(input: $input) {\n      document {\n        userId {\n          id\n        }\n        created_at\n        updated_at\n        resourceId\n        source\n        roleId\n      }\n    }\n  }\n": typeof types.CreateZucityUserRolesDocument,
    "\n  mutation enableIndexingZucityUserRoles(\n    $input: EnableIndexingZucityUserRolesInput!\n  ) {\n    enableIndexingZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": typeof types.EnableIndexingZucityUserRolesDocument,
    "\n  mutation UpdateZucityUserRoles($input: UpdateZucityUserRolesInput!) {\n    updateZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": typeof types.UpdateZucityUserRolesDocument,
    "\n  query GetUserRoles($userId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: { where: { userId: { equalTo: $userId } } }\n    ) {\n      edges {\n        node {\n          roleId\n          resourceId\n          source\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetUserRolesDocument,
    "\n  query GetSpace($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpaceDocument,
    "\n  mutation InstallDappToSpace($input: CreateZucityInstalledAppInput!) {\n    createZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        nativeAppName\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.InstallDappToSpaceDocument,
    "\n  query GetSpaceInstalledApps(\n    $filters: ZucityInstalledAppFiltersInput\n    $first: Int\n    $after: String\n  ) {\n    zucityInstalledAppIndex(filters: $filters, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          sourceId\n          spaceId\n          nativeAppName\n          installedAppId\n          createdAt\n          updatedAt\n          installedApp {\n            id\n            appName\n            appType\n            description\n            tagline\n            bannerUrl\n            appUrl\n            openSource\n            devStatus\n            developerName\n            categories\n          }\n          space {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": typeof types.GetSpaceInstalledAppsDocument,
    "\n  mutation UninstallDappFromSpace(\n    $input: EnableIndexingZucityInstalledAppInput!\n  ) {\n    enableIndexingZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.UninstallDappFromSpaceDocument,
    "\n  mutation createZucitySpaceMutation($input: CreateZucitySpaceInput!) {\n    createZucitySpace(input: $input) {\n      document {\n        id\n        name\n        description\n        profileId\n        avatar\n        banner\n        category\n      }\n    }\n  }\n": typeof types.CreateZucitySpaceMutationDocument,
    "\n  query GetSpaces($first: Int) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetSpacesDocument,
};
const documents: Documents = {
    "\n  query GetDappList {\n    zucityDappInfoIndex(first: 100) {\n      edges {\n        node {\n          id\n          appName\n          tagline\n          developerName\n          description\n          bannerUrl\n          categories\n          devStatus\n          openSource\n          repositoryUrl\n          appUrl\n          websiteUrl\n          docsUrl\n          profile {\n            author {\n              id\n            }\n            avatar\n            username\n          }\n        }\n      }\n    }\n  }\n": types.GetDappListDocument,
    "\n  query SearchProfileByExactUsername($username: String!) {\n    zucityProfileIndex(\n      first: 20\n      filters: { where: { username: { equalTo: $username } } }\n    ) {\n      edges {\n        node {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.SearchProfileByExactUsernameDocument,
    "\n  query GetProfileByDID($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetProfileByDidDocument,
    "\n  mutation CreateProfile($input: SetZucityProfileInput!) {\n    setZucityProfile(input: $input) {\n      document {\n        id\n        username\n      }\n    }\n  }\n": types.CreateProfileDocument,
    "\n  query GetOwnProfile {\n    viewer {\n      zucityProfile {\n        author {\n          id\n        }\n        avatar\n        id\n        username\n      }\n    }\n  }\n": types.GetOwnProfileDocument,
    "\n  query GetMembers($source: String, $resourceId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: {\n        where: {\n          source: { equalTo: $source }\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          roleId\n          customAttributes {\n            tbd\n          }\n          userId {\n            zucityProfile {\n              avatar\n              username\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetMembersDocument,
    "\n  query GetUserRole($userId: String, $resourceId: String, $resource: String) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $resource }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            zucityProfile {\n              avatar\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetUserRoleDocument,
    "\n  mutation CreateZucityUserRoles($input: CreateZucityUserRolesInput!) {\n    createZucityUserRoles(input: $input) {\n      document {\n        userId {\n          id\n        }\n        created_at\n        updated_at\n        resourceId\n        source\n        roleId\n      }\n    }\n  }\n": types.CreateZucityUserRolesDocument,
    "\n  mutation enableIndexingZucityUserRoles(\n    $input: EnableIndexingZucityUserRolesInput!\n  ) {\n    enableIndexingZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.EnableIndexingZucityUserRolesDocument,
    "\n  mutation UpdateZucityUserRoles($input: UpdateZucityUserRolesInput!) {\n    updateZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n": types.UpdateZucityUserRolesDocument,
    "\n  query GetUserRoles($userId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: { where: { userId: { equalTo: $userId } } }\n    ) {\n      edges {\n        node {\n          roleId\n          resourceId\n          source\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.GetUserRolesDocument,
    "\n  query GetSpace($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n      }\n    }\n  }\n": types.GetSpaceDocument,
    "\n  mutation InstallDappToSpace($input: CreateZucityInstalledAppInput!) {\n    createZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        nativeAppName\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.InstallDappToSpaceDocument,
    "\n  query GetSpaceInstalledApps(\n    $filters: ZucityInstalledAppFiltersInput\n    $first: Int\n    $after: String\n  ) {\n    zucityInstalledAppIndex(filters: $filters, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          sourceId\n          spaceId\n          nativeAppName\n          installedAppId\n          createdAt\n          updatedAt\n          installedApp {\n            id\n            appName\n            appType\n            description\n            tagline\n            bannerUrl\n            appUrl\n            openSource\n            devStatus\n            developerName\n            categories\n          }\n          space {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n": types.GetSpaceInstalledAppsDocument,
    "\n  mutation UninstallDappFromSpace(\n    $input: EnableIndexingZucityInstalledAppInput!\n  ) {\n    enableIndexingZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.UninstallDappFromSpaceDocument,
    "\n  mutation createZucitySpaceMutation($input: CreateZucitySpaceInput!) {\n    createZucitySpace(input: $input) {\n      document {\n        id\n        name\n        description\n        profileId\n        avatar\n        banner\n        category\n      }\n    }\n  }\n": types.CreateZucitySpaceMutationDocument,
    "\n  query GetSpaces($first: Int) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSpacesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetDappList {\n    zucityDappInfoIndex(first: 100) {\n      edges {\n        node {\n          id\n          appName\n          tagline\n          developerName\n          description\n          bannerUrl\n          categories\n          devStatus\n          openSource\n          repositoryUrl\n          appUrl\n          websiteUrl\n          docsUrl\n          profile {\n            author {\n              id\n            }\n            avatar\n            username\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetDappListDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchProfileByExactUsername($username: String!) {\n    zucityProfileIndex(\n      first: 20\n      filters: { where: { username: { equalTo: $username } } }\n    ) {\n      edges {\n        node {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').SearchProfileByExactUsernameDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetProfileByDID($did: ID!) {\n    node(id: $did) {\n      ... on CeramicAccount {\n        zucityProfile {\n          id\n          username\n          avatar\n          author {\n            id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetProfileByDidDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateProfile($input: SetZucityProfileInput!) {\n    setZucityProfile(input: $input) {\n      document {\n        id\n        username\n      }\n    }\n  }\n"): typeof import('./graphql').CreateProfileDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOwnProfile {\n    viewer {\n      zucityProfile {\n        author {\n          id\n        }\n        avatar\n        id\n        username\n      }\n    }\n  }\n"): typeof import('./graphql').GetOwnProfileDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMembers($source: String, $resourceId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: {\n        where: {\n          source: { equalTo: $source }\n          resourceId: { equalTo: $resourceId }\n        }\n      }\n    ) {\n      edges {\n        node {\n          roleId\n          customAttributes {\n            tbd\n          }\n          userId {\n            zucityProfile {\n              avatar\n              username\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetMembersDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserRole($userId: String, $resourceId: String, $resource: String) {\n    zucityUserRolesIndex(\n      first: 1\n      filters: {\n        where: {\n          userId: { equalTo: $userId }\n          resourceId: { equalTo: $resourceId }\n          source: { equalTo: $resource }\n        }\n      }\n    ) {\n      edges {\n        node {\n          id\n          roleId\n          userId {\n            zucityProfile {\n              avatar\n              author {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetUserRoleDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateZucityUserRoles($input: CreateZucityUserRolesInput!) {\n    createZucityUserRoles(input: $input) {\n      document {\n        userId {\n          id\n        }\n        created_at\n        updated_at\n        resourceId\n        source\n        roleId\n      }\n    }\n  }\n"): typeof import('./graphql').CreateZucityUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation enableIndexingZucityUserRoles(\n    $input: EnableIndexingZucityUserRolesInput!\n  ) {\n    enableIndexingZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').EnableIndexingZucityUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateZucityUserRoles($input: UpdateZucityUserRolesInput!) {\n    updateZucityUserRoles(input: $input) {\n      document {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').UpdateZucityUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserRoles($userId: String) {\n    zucityUserRolesIndex(\n      first: 1000\n      filters: { where: { userId: { equalTo: $userId } } }\n    ) {\n      edges {\n        node {\n          roleId\n          resourceId\n          source\n          userId {\n            id\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetUserRolesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpace($id: ID!) {\n    node(id: $id) {\n      ... on ZucitySpace {\n        id\n        avatar\n        banner\n        description\n        name\n        profileId\n        tagline\n        category\n        color\n        createdAt\n        updatedAt\n        tags {\n          tag\n        }\n        customAttributes {\n          tbd\n        }\n        socialLinks {\n          title\n          links\n        }\n        customLinks {\n          title\n          links\n        }\n        owner {\n          id\n          zucityProfile {\n            id\n            avatar\n            author {\n              id\n            }\n            username\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InstallDappToSpace($input: CreateZucityInstalledAppInput!) {\n    createZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        nativeAppName\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): typeof import('./graphql').InstallDappToSpaceDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaceInstalledApps(\n    $filters: ZucityInstalledAppFiltersInput\n    $first: Int\n    $after: String\n  ) {\n    zucityInstalledAppIndex(filters: $filters, first: $first, after: $after) {\n      edges {\n        node {\n          id\n          sourceId\n          spaceId\n          nativeAppName\n          installedAppId\n          createdAt\n          updatedAt\n          installedApp {\n            id\n            appName\n            appType\n            description\n            tagline\n            bannerUrl\n            appUrl\n            openSource\n            devStatus\n            developerName\n            categories\n          }\n          space {\n            id\n            name\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpaceInstalledAppsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UninstallDappFromSpace(\n    $input: EnableIndexingZucityInstalledAppInput!\n  ) {\n    enableIndexingZucityInstalledApp(input: $input) {\n      document {\n        id\n        sourceId\n        spaceId\n        installedAppId\n        installedApp {\n          id\n          appName\n        }\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): typeof import('./graphql').UninstallDappFromSpaceDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createZucitySpaceMutation($input: CreateZucitySpaceInput!) {\n    createZucitySpace(input: $input) {\n      document {\n        id\n        name\n        description\n        profileId\n        avatar\n        banner\n        category\n      }\n    }\n  }\n"): typeof import('./graphql').CreateZucitySpaceMutationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSpaces($first: Int) {\n    zucitySpaceIndex(first: $first) {\n      edges {\n        node {\n          id\n          avatar\n          banner\n          description\n          name\n          profileId\n          tagline\n          category\n          color\n          createdAt\n          updatedAt\n          tags {\n            tag\n          }\n          customAttributes {\n            tbd\n          }\n          socialLinks {\n            title\n            links\n          }\n          customLinks {\n            title\n            links\n          }\n          owner {\n            id\n            zucityProfile {\n              id\n              avatar\n              author {\n                id\n              }\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').GetSpacesDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
