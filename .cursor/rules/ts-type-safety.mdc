---
description: ALWAYS use when writing TypeScript functions and handling data types to ensure complete type safety. This rule enforces strict typing, immutability, and proper use of TypeScript-specific features.
globs: "**/*.{ts,tsx}"
---
<?xml version="1.0" encoding="UTF-8"?>
<cursor_rules>
    <rule>
        <n>typescript_type_safety</n>
        <description>Type safety and TypeScript-specific features usage</description>
        
        <filters>
            <filter>
                <type>file_extension</type>
                <pattern>\.(ts|tsx)$</pattern>
            </filter>
        </filters>

        <guidelines>
            <section name="function_returns">
                <title>Function Return Types</title>
                <trigger>
                    <pattern>function.*\([^)]*\)(?!:)</pattern>
                </trigger>
                <guidelines>
                    <item>Explicitly declare return types</item>
                    <item>Use void for functions with no return</item>
                    <item>Consider using never for functions that throw</item>
                </guidelines>
            </section>

            <section name="type_definitions">
                <title>Type Definitions</title>
                <trigger>
                    <pattern>type\s+\w+\s*=\s*\{[^}]+\}</pattern>
                </trigger>
                <guidelines>
                    <item>Use interface for object definitions</item>
                    <item>Use type for unions, intersections, or mapped types</item>
                    <item>Interfaces support declaration merging</item>
                </guidelines>
            </section>

            <section name="immutability">
                <title>Enforce Immutability</title>
                <trigger>
                    <pattern>let\s+\w+</pattern>
                </trigger>
                <guidelines>
                    <item>Use const by default</item>
                    <item>Mark interface properties as readonly</item>
                    <item>Use readonly arrays and tuples when possible</item>
                </guidelines>
            </section>

            <section name="imports">
                <title>Import Best Practices</title>
                <trigger>
                    <pattern>import\s+\{[^}]+\}\s+from</pattern>
                </trigger>
                <guidelines>
                    <item>Use 'import type' for type-only imports</item>
                    <item>Group imports by category (React, types, utils)</item>
                    <item>Remove unused imports</item>
                </guidelines>
            </section>
        </guidelines>

        <examples>
            <example type="bad">
                <title>Poor type safety practices</title>
                <code>
                let data = fetchData();
                function process(input) {
                  return input.value;
                }
                </code>
            </example>
            
            <example type="good">
                <title>Good type safety practices</title>
                <code>
                const data: ApiResponse = fetchData();
                function process(input: InputType): OutputType {
                  return input.value;
                }
                </code>
            </example>
        </examples>

        <metadata>
            <priority>high</priority>
            <version>1.0</version>
        </metadata>
    </rule>
</cursor_rules> 