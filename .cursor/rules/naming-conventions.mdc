---
description:  ALWAYS use when creating or renaming files, variables, functions, or types to ensure consistent naming patterns. This rule enforces case conventions and descriptive naming practices across the codebase.
globs: "**/*.{ts,tsx}"
---
<?xml version="1.0" encoding="UTF-8"?>
<rule>
  <metadata>
    <n>naming_conventions</n>
    <description>Standards for naming files, variables, functions, and other code elements</description>
    <priority>high</priority>
    <version>1.0</version>
  </metadata>

  <filters>
    <filter>
      <type>file_extension</type>
      <pattern>\.(ts|tsx)$</pattern>
    </filter>
  </filters>

  <actions>
    <action>
      <type>suggest</type>
      <message>
        <![CDATA[
        Follow these naming conventions:

        ## File and Directory Names
        - Use kebab-case for all files and directories
        - Make names descriptive and meaningful
        - Group related files in appropriately named directories

        ## Code Element Naming
        - Classes, Types, Interfaces: PascalCase
          ```typescript
          class UserService {}
          interface IUserProfile {}
          type ResponseData = string;
          ```
        
        - Variables, functions, methods: camelCase
          ```typescript
          const userData = {};
          function getUserProfile() {}
          ```
        
        - Constants, env variables: UPPER_CASE
          ```typescript
          const MAX_RETRY_COUNT = 3;
          process.env.API_KEY
          ```

        ## General Guidelines
        - Use descriptive names that reveal intent
        - Functions should use verb + noun format (e.g., getUserData)
        - Boolean variables should use is/has/should prefix
        - Avoid abbreviations unless universally understood
        ]]>
      </message>
    </action>
  </actions>

  <examples>
    <example>
      <input>
        // Bad
        const d = new Date();
        class userservice {}
      </input>
      <output>
        // Good
        const currentDate = new Date();
        class UserService {}
      </output>
    </example>
  </examples>
</rule> 