---
description: ALWAYS use when writing or modifying TypeScript code to ensure architectural integrity. This rule enforces core principles of clean code, proper nesting, and type safety across the codebase.
globs: "**/*.{ts,tsx}"
---
<?xml version="1.0" encoding="UTF-8"?>
<cursor_rules>
    <rule>
        <n>typescript_core_principles</n>
        <description>Core TypeScript principles and architectural guidelines</description>
        
        <filters>
            <filter>
                <type>file_extension</type>
                <pattern>\.(ts|tsx)$</pattern>
            </filter>
        </filters>

        <guidelines>
            <section name="clean_code">
                <title>Clean Code Principles</title>
                <trigger>
                    <pattern>(class|function|interface).*\{[\s\S]{100,}</pattern>
                </trigger>
                <guidelines>
                    <item>Keep classes and functions small and focused</item>
                    <item>Follow Single Responsibility Principle</item>
                    <item>Ensure high cohesion and low coupling</item>
                    <item>Use meaningful names that reveal intent</item>
                </guidelines>
            </section>

            <section name="nesting">
                <title>Nesting Guidelines</title>
                <trigger>
                    <pattern>function.*\{[^}]*function.*\{[^}]*function</pattern>
                </trigger>
                <guidelines>
                    <item>Maximum 2 levels of nesting for functions</item>
                    <item>Extract nested logic into separate functions</item>
                    <item>Consider using composition over deep nesting</item>
                </guidelines>
            </section>

            <section name="type_safety">
                <title>Type Safety</title>
                <trigger>
                    <pattern>: any</pattern>
                </trigger>
                <rule type="reject">
                    <message>Avoid using 'any' type. Use specific types or generics instead.</message>
                </rule>
            </section>

            <section name="package_management">
                <title>Package Management</title>
                <trigger>
                    <pattern>import.*from</pattern>
                </trigger>
                <guidelines>
                    <item>Use latest stable versions of dependencies</item>
                    <item>Document version requirements in package.json</item>
                    <item>Keep dependencies up to date</item>
                </guidelines>
            </section>
        </guidelines>

        <examples>
            <example type="bad">
                <title>Deep nesting and any type</title>
                <code>
                function processData(data: any) {
                  function inner1() {
                    function inner2() {
                      // Too deep
                    }
                  }
                }
                </code>
            </example>
            
            <example type="good">
                <title>Flat structure with proper typing</title>
                <code>
                interface IDataType {
                  id: string;
                  value: number;
                }
                
                function processData(data: IDataType) {
                  return processStep1(data);
                }
                
                function processStep1(data: IDataType) {
                  return data.value * 2;
                }
                </code>
            </example>
        </examples>

        <metadata>
            <priority>high</priority>
            <version>1.0</version>
        </metadata>
    </rule>
</cursor_rules> 