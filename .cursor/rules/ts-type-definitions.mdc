---
description: ALWAYS use when defining or modifying TypeScript types to ensure type safety and clarity. This rule enforces standards for interfaces, type aliases, generics, and proper type documentation.
globs: "**/*.{ts,tsx}"
---
<?xml version="1.0" encoding="UTF-8"?>
<cursor_rules>
    <rule>
        <n>typescript_type_definitions</n>
        <description>Standards for creating and using TypeScript types</description>
        
        <filters>
            <filter>
                <type>file_extension</type>
                <pattern>\.(ts|tsx)$</pattern>
            </filter>
        </filters>

        <guidelines>
            <section name="type_definitions">
                <title>Type Definition Best Practices</title>
                <trigger>
                    <pattern>(interface|type)\s+\w+\s*[{<]</pattern>
                </trigger>
                <guidelines>
                    <item>Use descriptive type names</item>
                    <item>Make types as specific as possible</item>
                    <item>Use generics for reusable types</item>
                    <item>Document complex types with JSDoc</item>
                </guidelines>
            </section>

            <section name="generic_types">
                <title>Generic Type Usage</title>
                <trigger>
                    <pattern>\w+<.*any.*></pattern>
                </trigger>
                <guidelines>
                    <item>Avoid any in generic type parameters</item>
                    <item>Use constraints to limit type parameters</item>
                    <item>Provide default type parameters when appropriate</item>
                </guidelines>
            </section>

            <section name="class_members">
                <title>Class Member Typing</title>
                <trigger>
                    <pattern>(public|private|protected)\s+\w+;</pattern>
                </trigger>
                <guidelines>
                    <item>Use access modifiers consistently</item>
                    <item>Mark readonly when appropriate</item>
                    <item>Consider using private fields (#) for true privacy</item>
                </guidelines>
            </section>
        </guidelines>

        <examples>
            <example type="bad">
                <title>Poor type definition</title>
                <code>
                type Data<T = any> = {
                  items: T[];
                };
                </code>
            </example>
            
            <example type="good">
                <title>Well-structured type definition</title>
                <code>
                interface Data<T extends Record<string, unknown>> {
                  readonly items: readonly T[];
                  readonly timestamp: number;
                }
                </code>
            </example>
        </examples>

        <metadata>
            <priority>high</priority>
            <version>1.0</version>
        </metadata>
    </rule>
</cursor_rules> 